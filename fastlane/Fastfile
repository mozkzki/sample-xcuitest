# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Description of what the lane does"
  lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
  end

  desc "fastlane自体のテスト用lane"
  lane :temp do
    ENV['SNAPSHOT_TEST_RECORD_MODE'] = 'true'
    result_bundle_path = File.join("#{Dir.pwd}", "uitest_output")
    puts "Current working directory before: #{result_bundle_path}"
    puts "----- #{ENV['SNAPSHOT_TEST_RECORD_MODE']}"
  end

  desc "UIテスト"
  lane :ui_test do |options|
    result_bundle_path = File.join("#{Dir.pwd}", "uitest_output")
    scan(
      project: "UITestSample.xcodeproj",
      scheme: "UITest",
      devices: ["iPhone 14"],
    #   devices: ["iPhone 14", "iPhone 14 Pro", "iPhone 14 Plus", "iPhone 14 Pro Max"],
    #   destination: "platform=iOS Simulator,OS=16.2,name=iPhone 14",
      configuration: "Debug",
    #   result_bundle: true,
      result_bundle: result_bundle_path,
      output_directory: result_bundle_path,

    #   parallel_testing: true,
    #   concurrent_workers: 4,
    #   max_concurrent_simulators: 4,
    #   disable_concurrent_testing: false,

    #   force_quit_simulator: true,
    #   skip_slack: true,
    #   include_simulator_logs: false,
    )
  end

  desc "UIテストのレポート生成"
  lane :make_report do |options|
    result_bundle_path = File.join("#{Dir.pwd}", "uitest_output")
    sh("xchtmlreport -r #{result_bundle_path}/UITest.xcresult")
  end

  desc "UIテスト用のビルド"
  lane :build_for_ui_test do
    sh("rm", "-rf", "../build-fastlane")
    run_tests(
      scheme: "UITest",
    #   devices: ["iPhone 14"],
      destination: "platform=iOS Simulator,OS=16.2,name=iPhone 14",
      configuration: "Debug",
      derived_data_path: "build-fastlane",
      build_for_testing: true,
      clean: true,
    )
  end

  desc "UIテスト(テストクラス指定, 分散実行用)"
  lane :ui_test_without_building do |options|
    run_tests(
      scheme: "UITest",
    #   devices: ["iPhone 14"],
      destination: "platform=iOS Simulator,OS=16.2,name=iPhone 14",
      only_testing: options[:tests],
      derived_data_path: "build-fastlane",
      test_without_building: true,

      force_quit_simulator: true,

      # 上位で分散させるので、Fastlaneの並列は無効化
    #   parallel_testing: true,
    #   concurrent_workers: 4,
    #   max_concurrent_simulators: 4,
    #   disable_concurrent_testing: false,
    )
  end

  private_lane :snapshot_devices do
    [
    # "iPhone 8",
    # "iPhone X",
    "iPhone 14",
    # "iPhone 14 Pro Max"
    ]
  end

  lane :capture_snapshot do |options|
    sh("rm", "-rf", "../snapshot_tests/ReferenceImages_64/")
    ENV["SNAPSHOT_TEST_RECORD_MODE"] = "true"
    scheme = "SnapShotTest"
    snapshot_devices.each do |device|
      ensure_env_vars(
        env_vars: ['SNAPSHOT_TEST_RECORD_MODE']
      )
      run_tests(
        scheme: scheme,
        device: device,
        only_testing: options[:tests],
        include_simulator_logs: false,
        fail_build: false
      )
    end
  end

  lane :snapshot_test do |options|
    ENV["SNAPSHOT_TEST_RECORD_MODE"] = "false"
    scheme = "SnapShotTest"
    snapshot_devices.each do |device|
      ensure_env_vars(
        env_vars: ['SNAPSHOT_TEST_RECORD_MODE']
      )
      run_tests(
        scheme: scheme,
        device: device,
        only_testing: options[:tests],
        include_simulator_logs: false,
      )
    end
  end

  lane :snapshot_test2 do |options|
    scheme = "SnapShotTest2"
    snapshot_devices.each do |device|
      run_tests(
        scheme: scheme,
        device: device,
        only_testing: options[:tests],
        include_simulator_logs: false,
      )
    end
  end

  before_all do |lane|
    ensure_xcode_version
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end

end
